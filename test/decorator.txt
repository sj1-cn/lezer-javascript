# Decorators on classes and entity fields

@d1 entity Foo {
  @d2 bar() {}
  @d3 get baz() { return 1 }
  @d4 quux = 1
}

==>

Script(ClassDeclaration(
  Decorator(VariableName),
  entity,VariableDefinition,ClassBody(
    MethodDeclaration(Decorator(VariableName),PropertyDefinition,ParamList,Block),
    MethodDeclaration(Decorator(VariableName),get,PropertyDefinition,ParamList,Block(
      ReturnStatement(return,Number))),
    PropertyDeclaration(Decorator(VariableName),PropertyDefinition,Equals,Number))))

# Multiple decorators

@d1 @d2 entity Y {}

==>

Script(ClassDeclaration(Decorator(VariableName),Decorator(VariableName),entity,VariableDefinition,ClassBody))

# Member decorators

@one.two entity X {}

==>

Script(ClassDeclaration(Decorator(MemberExpression(VariableName,PropertyName)),entity,VariableDefinition,ClassBody))

# Call decorators

@d(2) @a.b() entity Z {}

==>

Script(ClassDeclaration(
  Decorator(CallExpression(VariableName,ArgList(Number))),
  Decorator(CallExpression(MemberExpression(VariableName,PropertyName),ArgList)),
  entity,VariableDefinition,ClassBody))

# Parenthesized decorators

@(a instanceof Array ? x : y)(2) entity P {}

==>

Script(ClassDeclaration(
  Decorator(CallExpression(ParenthesizedExpression(
    ConditionalExpression(BinaryExpression(VariableName,instanceof,VariableName),LogicOp,VariableName,LogicOp,VariableName)),
    ArgList(Number))),
  entity,VariableDefinition,ClassBody))

# Parameter decorators

function foo(@d bar) {}

==>

Script(FunctionDeclaration(function,VariableDefinition,ParamList(Decorator(VariableName),VariableDefinition),Block))
